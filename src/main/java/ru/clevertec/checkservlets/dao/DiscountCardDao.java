package ru.clevertec.checkservlets.dao;

import ru.clevertec.checkservlets.dao.api.CrudDao;
import ru.clevertec.checkservlets.model.DiscountCard;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class DiscountCardDao implements CrudDao<DiscountCard> {

    private static final String INSERT_INTO_QUERY = "INSERT INTO clevertec_shop.discount_card(discount) VALUES(?);";
    private static final String SELECT_BY_ID_QUERY = "SELECT * FROM clevertec_shop.discount_card WHERE id=?;";
    private static final String SELECT_ALL_QUERY = "SELECT * FROM clevertec_shop.discount_card;";
    private static final String SELECT_PAGE_QUERY = "SELECT * FROM clevertec_shop.discount_card LIMIT ? OFFSET ?;";
    private static final String UPDATE_QUERY = "UPDATE clevertec_shop.discount_card SET discount=? WHERE id=?;";
    private static final String DELETE_QUERY = "DELETE FROM clevertec_shop.discount_card WHERE id=?;";

    private static DiscountCardDao instance;

    public static DiscountCardDao getInstance() {
        if (instance == null) {
            instance = new DiscountCardDao();
        }
        return instance;
    }

    /**
     * Creates new discount card in database.<br/>
     * Returns null if something goes wrong.
     *
     * @param entity new discount card
     * @return id generated by database
     */
    @Override
    public Integer create(DiscountCard entity) {
        try (Connection connection = DaoDataSource.getConnection();
             PreparedStatement ps = connection.prepareStatement(INSERT_INTO_QUERY,
                     Statement.RETURN_GENERATED_KEYS)) {
            ps.setFloat(1, entity.getDiscount());
            ps.executeUpdate();
            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Id wasn't generated.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Gets discount card from database by id.
     *
     * @param id id of desired product
     * @return discount card from database if it exists, null otherwise
     */
    @Override
    public DiscountCard read(int id) {
        DiscountCard discountCard = null;
        try (Connection connection = DaoDataSource.getConnection();
             PreparedStatement ps = connection.prepareStatement(SELECT_BY_ID_QUERY)) {
            ps.setInt(1, id);
            ResultSet resultSet = ps.executeQuery();
            resultSet.next();
            discountCard = new DiscountCard(resultSet);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return discountCard;
    }

    /**
     * Gets discount cards from database with pagination. <br/>
     * Might return empty list if something goes wrong.
     *
     * @param page  number of page
     * @param limit limit of fetch
     * @return list of discount cards
     */
    @Override
    public List<DiscountCard> readAll(int page, int limit) {
        int offset = (page - 1) * limit;
        List<DiscountCard> discountCards = new ArrayList<>();
        try (Connection connection = DaoDataSource.getConnection();
             PreparedStatement ps = connection.prepareStatement(SELECT_PAGE_QUERY)) {
            ps.setInt(1, limit);
            ps.setInt(2, offset);
            ResultSet resultSet = ps.executeQuery();
            while (resultSet.next()) {
                discountCards.add(new DiscountCard(resultSet));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return discountCards;
    }

    /**
     * Gets all discount cards from database. <br/>
     * Might return empty list if something goes wrong.
     *
     * @return list of discount cards
     */
    @Override
    public List<DiscountCard> readAll() {
        List<DiscountCard> discountCards = new ArrayList<>();
        try (Connection connection = DaoDataSource.getConnection();
             Statement statement = connection.createStatement()) {
            ResultSet resultSet = statement.executeQuery(SELECT_ALL_QUERY);
            while (resultSet.next()) {
                discountCards.add(new DiscountCard(resultSet));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return discountCards;
    }

    /**
     * Updates discount card in database with id from updatableEntity. <br/>
     * Returns null if something goes wrong.
     *
     * @param updatableEntity product to update
     * @return list of products
     */
    @Override
    public DiscountCard update(DiscountCard updatableEntity) {
        try (Connection connection = DaoDataSource.getConnection();
             PreparedStatement ps = connection.prepareStatement(UPDATE_QUERY)) {
            ps.setFloat(1, updatableEntity.getDiscount());
            ps.setInt(2, updatableEntity.getId());
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return updatableEntity;
    }

    /**
     * Deletes discount card from database by id.<br/>
     *
     * @param id id of entity to delete
     */
    @Override
    public void delete(int id) {
        try (Connection connection = DaoDataSource.getConnection();
             PreparedStatement ps = connection.prepareStatement(DELETE_QUERY)) {
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}